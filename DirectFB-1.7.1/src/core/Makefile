# Makefile.in generated by automake 1.14.1 from Makefile.am.
# src/core/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/DirectFB
pkgincludedir = $(includedir)/DirectFB
pkglibdir = $(libdir)/DirectFB
pkglibexecdir = $(libexecdir)/DirectFB
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
DIST_COMMON = $(top_srcdir)/rules/flux_comp.make $(srcdir)/Makefile.in \
	$(srcdir)/Makefile.am $(top_srcdir)/depcomp \
	$(internalinclude_HEADERS)
subdir = src/core
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/as-ac-expand.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)
libdirectfb_core_la_LIBADD =
am_libdirectfb_core_la_OBJECTS = CoreDFB.lo CoreDFB_real.lo \
	CoreSlave.lo CoreSlave_real.lo CoreGraphicsState.lo \
	CoreGraphicsState_real.lo CoreGraphicsStateClient.lo \
	CoreInputDevice.lo CoreInputDevice_real.lo CoreLayer.lo \
	CoreLayer_real.lo CoreLayerContext.lo CoreLayerContext_real.lo \
	CoreLayerRegion.lo CoreLayerRegion_real.lo CorePalette.lo \
	CorePalette_real.lo CoreScreen.lo CoreScreen_real.lo \
	CoreSurface.lo CoreSurface_real.lo CoreSurfaceClient.lo \
	CoreSurfaceClient_real.lo CoreWindow.lo CoreWindow_real.lo \
	CoreWindowStack.lo CoreWindowStack_real.lo Debug.lo \
	DisplayTask.lo Interface.lo Renderer.lo SurfaceTask.lo Task.lo \
	TaskManager.lo TaskThreadsQ.lo Util.lo clipboard.lo \
	colorhash.lo core.lo core_parts.lo fonts.lo gfxcard.lo \
	graphics_state.lo input.lo input_hub.lo layer_context.lo \
	layer_control.lo layer_region.lo layers.lo \
	local_surface_pool.lo palette.lo prealloc_surface_pool.lo \
	prealloc_surface_pool_bridge.lo screen.lo screens.lo \
	shared_secure_surface_pool.lo shared_surface_pool.lo state.lo \
	surface.lo surface_allocation.lo surface_buffer.lo \
	surface_client.lo surface_core.lo surface_pool.lo \
	surface_pool_bridge.lo system.lo windows.lo windowstack.lo \
	wm.lo
libdirectfb_core_la_OBJECTS = $(am_libdirectfb_core_la_OBJECTS)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(libdirectfb_core_la_SOURCES)
DIST_SOURCES = $(libdirectfb_core_la_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(internalincludedir)"
HEADERS = $(internalinclude_HEADERS)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = aclocal-1.14 
ALSA_CFLAGS = 
ALSA_LIBS = 
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AR = ar
AS = gcc
ASFLAGS = -ffast-math -pipe 
AUTOCONF = autoconf
AUTOHEADER = autoheader
AUTOMAKE = automake-1.14
AVIFILE_CFLAGS = 
AVIFILE_CONFIG = 
AVIFILE_LIBS = 
AWK = gawk
CC = gcc
CCAS = gcc
CCASDEPMODE = depmode=gcc3
CCASFLAGS = -g -O2
CCDEPMODE = depmode=gcc3
CDDB_CFLAGS = 
CDDB_LIBS = 
CFLAGS = -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-strict-aliasing -Werror-implicit-function-declaration -O3 -g2 -ffast-math -pipe  -D_GNU_SOURCE  -std=gnu99 -Werror-implicit-function-declaration
CPP = gcc -E
CPPFLAGS = -D_REENTRANT 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wall -Wno-strict-aliasing -g -O2 -O3 -g2 -ffast-math -pipe  -D_GNU_SOURCE 
CYGPATH_W = echo
DATADIR = ${datarootdir}/directfb-1.7.1
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DEP_ONE = 
DEP_VOODOO = 
DFB_CFLAGS_OMIT_FRAME_POINTER = -fomit-frame-pointer
DFB_INTERNAL_CFLAGS = -D_GNU_SOURCE 
DFB_LDFLAGS =  
DFB_SMOOTH_SCALING = 
DIRECTFB_BINARY_AGE = 0
DIRECTFB_BUILD_ONE = 0
DIRECTFB_BUILD_PURE_VOODOO = 0
DIRECTFB_BUILD_VOODOO = 0
DIRECTFB_CSOURCE = 
DIRECTFB_INTERFACE_AGE = 0
DIRECTFB_MAJOR_VERSION = 1
DIRECTFB_MICRO_VERSION = 1
DIRECTFB_MINOR_VERSION = 7
DIRECTFB_VERSION = 1.7.1
DIRECTFB_VERSION_VENDOR = 
DIRECT_BUILD_DEBUG = 0
DIRECT_BUILD_DEBUGS = 1
DIRECT_BUILD_DYNLOAD = 1
DIRECT_BUILD_GCC_ATOMICS = 0
DIRECT_BUILD_GETTID = 1
DIRECT_BUILD_MULTICORE = 1
DIRECT_BUILD_NETWORK = 1
DIRECT_BUILD_OSTYPE = DIRECT_OS_LINUX_GNU_LIBC
DIRECT_BUILD_STDBOOL = 1
DIRECT_BUILD_TEXT = 1
DIRECT_BUILD_TRACE = 0
DLLTOOL = false
DRMKMS_CFLAGS = 
DRMKMS_LIBS = 
DSYMUTIL = 
DUMPBIN = 
DYNLIB = -ldl
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGL_CFLAGS = 
EGL_LIBS = 
EGREP = /bin/grep -E
EXEEXT = 
FFMPEG_CFLAGS = 
FFMPEG_LIBS = 
FGREP = /bin/grep -F
FLASH_LIBS = 
FLUXCOMP = 
FLUXED_ARGS_BYTES = 1024
FREETYPE_CFLAGS = -I/usr/include/freetype2  
FREETYPE_LIBS = -lfreetype  
FREETYPE_PROVIDER = 
FS_MAX_CHANNELS = 6
FUSION_BUILD_KERNEL = 1
FUSION_BUILD_MULTI = 0
FUSION_MESSAGE_SIZE = 16384
GENERIC_INCLUDEDIR = ${prefix}/include
GIF_PROVIDER = 
GLES2_CFLAGS = 
GLES2_LIBS = 
GL_LIBS = -lGL
GP2D_CFLAGS = 
GP2D_LIBS = 
GREP = /bin/grep
GSTREAMER_INCL = 
GSTREAMER_LIBS = 
HAVE_LINUX = 
IMLIB2_CFLAGS = 
IMLIB2_CONFIG = 
IMLIB2_LIBS = 
INCLUDEDIR = ${prefix}/include/directfb
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INTERNALINCLUDEDIR = ${prefix}/include/directfb-internal
JASPER_LIBS = -ljasper -lm -ljpeg
JPEG_PROVIDER = 
LD = /usr/bin/ld
LDFLAGS = 
LIBJPEG = -ljpeg
LIBM = -lm
LIBMNG = 
LIBMPEG3_LIBS = 
LIBOBJS = 
LIBPNG_CFLAGS = -I/usr/include/libpng12  
LIBPNG_LIBS = -lpng12  
LIBS = -ldl -lrt -lpthread 
LIBTIFF_CFLAGS = 
LIBTIFF_LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBWEBP_CFLAGS = 
LIBWEBP_LIBS = 
LINOTYPE_CFLAGS = 
LINOTYPE_LIBS = 
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_AGE = 0
LT_BINARY = 1
LT_CURRENT = 1
LT_RELEASE = 1.7
LT_REVISION = 0
MAD_LIBS = 
MAINT = #
MAKEINFO = makeinfo
MAN2HTML = no
MANIFEST_TOOL = :
MESA_CFLAGS = 
MESA_LIBS = 
MKDIR_P = /bin/mkdir -p
MNG_PROVIDER = 
MODULEDIR = ${exec_prefix}/lib/directfb-1.7-1
MODULEDIRNAME = directfb-1.7-1
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OPENQUICKTIME_LIBS = 
OSX_LIBS = 
OTOOL = 
OTOOL64 = 
PACKAGE = DirectFB
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_URL = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
PNG_PROVIDER = 
PVR2D_CFLAGS = 
PVR2D_LIBS = 
RANLIB = ranlib
RTLIB = -lrt
RUNTIME_SYSROOT = 
SDL_CFLAGS = 
SDL_LIBS = 
SED = /bin/sed
SET_MAKE = 
SH772X_DEP_CFLAGS = 
SH772X_DEP_LIBS = 
SH772X_SHJPEG_DEP_CFLAGS = 
SH772X_SHJPEG_DEP_LIBS = 
SHELL = /bin/bash
SOPATH = ${exec_prefix}/lib/libdirectfb-1.7.so.1
STRIP = strip
SVG_CFLAGS = 
SVG_LIBS = 
SWFDEC_CFLAGS = 
SWFDEC_LIBS = 
SYSCONFDIR = /usr/local/etc
THREADFLAGS = -D_REENTRANT
THREADLIB = -lpthread
TIMIDITY_CFLAGS = 
TIMIDITY_LIBS = 
TSLIB_CFLAGS = 
TSLIB_LIBS = 
VERSION = 1.7.1
VNC_CFLAGS = 
VNC_CONFIG = no
VNC_LIBS = 
VOODOO_BUILD_NO_SETSOCKOPT = 0
VORBISFILE_CFLAGS = 
VORBISFILE_LIBS = 
X11VDPAU_CFLAGS = 
X11VDPAU_LIBS = 
X11_CFLAGS =  
X11_LIBS = -lX11 -lXext  
XINE_CFLAGS = 
XINE_CONFIG = 
XINE_LIBS = 
XINE_PLUGINDIR = 
XINE_VDPAU_CFLAGS = 
XINE_VDPAU_LIBS = 
XINE_VDPAU_PLUGINDIR = 
ZLIB_LIBS = 
abs_builddir = /home/nayeem/Desktop/DirectFB/DirectFB-1.7.1/src/core
abs_srcdir = /home/nayeem/Desktop/DirectFB/DirectFB-1.7.1/src/core
abs_top_builddir = /home/nayeem/Desktop/DirectFB/DirectFB-1.7.1
abs_top_srcdir = /home/nayeem/Desktop/DirectFB/DirectFB-1.7.1
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/nayeem/Desktop/DirectFB/DirectFB-1.7.1/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
INCLUDES = \
	-I$(top_builddir)/include	\
	-I$(top_builddir)/lib		\
	-I$(top_builddir)/src		\
	-I$(top_srcdir)/include		\
	-I$(top_srcdir)/lib		\
	-I$(top_srcdir)/src

AM_CPPFLAGS = \
	-DDATADIR=\"${RUNTIME_SYSROOT}${datarootdir}/directfb-1.7.1\"		\
	-DSOPATH=\"${exec_prefix}/lib/libdirectfb-1.7.so.1\"		\
	-DMODULEDIR=\"${RUNTIME_SYSROOT}${exec_prefix}/lib/directfb-1.7-1\"	\
	"-DBUILDTIME=\"`date -u "+%Y-%m-%d %H:%M"`\"" \
	-DFLUXED_ARGS_BYTES=1024

MKNAMES = $(top_srcdir)/tools/mknames.sh
INCP = $(srcdir)
DISTCLEANFILES = core_strings.h
internalincludedir = $(INTERNALINCLUDEDIR)/core
internalinclude_HEADERS = \
	CoreDFB_CallMode.h		\
	$(builddir)/CoreDFB.h		\
	CoreDFB_includes.h	\
	$(builddir)/CoreSlave.h		\
	CoreSlave_includes.h	\
	$(builddir)/CoreGraphicsState.h	\
	CoreGraphicsState_includes.h	\
	CoreGraphicsStateClient.h	\
	$(builddir)/CoreInputDevice.h		\
	CoreInputDevice_includes.h	\
	$(builddir)/CoreLayer.h		\
	CoreLayer_includes.h	\
	$(builddir)/CoreLayerContext.h	\
	CoreLayerContext_includes.h	\
	$(builddir)/CoreLayerRegion.h	\
	CoreLayerRegion_includes.h	\
	$(builddir)/CorePalette.h		\
	CorePalette_includes.h	\
	$(builddir)/CoreScreen.h		\
	CoreScreen_includes.h	\
	$(builddir)/CoreSurface.h		\
	CoreSurface_includes.h	\
	$(builddir)/CoreSurfaceClient.h		\
	CoreSurfaceClient_includes.h	\
	$(builddir)/CoreWindow.h		\
	CoreWindow_includes.h	\
	$(builddir)/CoreWindowStack.h		\
	CoreWindowStack_includes.h	\
	Debug.h			\
	DisplayTask.h		\
	Fifo.h			\
	Interface.h		\
	PacketBuffer.h		\
	Renderer.h		\
	SurfaceTask.h		\
	Task.h			\
	TaskManager.h		\
	TaskThreadsQ.h		\
	Util.h			\
	clipboard.h		\
	colorhash.h		\
	coredefs.h		\
	coretypes.h		\
	core_parts.h		\
	core_strings.h		\
	core_system.h		\
	core.h			\
	fonts.h			\
	gfxcard.h		\
	graphics_driver.h	\
	graphics_state.h	\
	input.h			\
	input_driver.h		\
	input_hub.h		\
	layer_context.h		\
	layer_control.h		\
	layer_region.h		\
	layers.h		\
	layers_internal.h	\
	palette.h		\
	screen.h		\
	screens.h		\
	screens_internal.h	\
	state.h			\
	surface.h		\
	surface_allocation.h	\
	surface_buffer.h	\
	surface_client.h	\
	surface_core.h		\
	surface_pool.h		\
	surface_pool_bridge.h	\
	system.h		\
	windows.h		\
	windows_internal.h	\
	windowstack.h		\
	wm.h			\
	wm_module.h

noinst_LTLIBRARIES = libdirectfb_core.la
libdirectfb_core_la_SOURCES = \
	$(builddir)/CoreDFB.cpp		\
	CoreDFB_real.cpp	\
	$(builddir)/CoreSlave.cpp		\
	CoreSlave_real.cpp	\
	$(builddir)/CoreGraphicsState.cpp	\
	CoreGraphicsState_real.cpp	\
	CoreGraphicsStateClient.cpp		\
	$(builddir)/CoreInputDevice.cpp		\
	CoreInputDevice_real.cpp	\
	$(builddir)/CoreLayer.cpp		\
	CoreLayer_real.cpp	\
	$(builddir)/CoreLayerContext.cpp	\
	CoreLayerContext_real.cpp	\
	$(builddir)/CoreLayerRegion.cpp	\
	CoreLayerRegion_real.cpp	\
	$(builddir)/CorePalette.cpp		\
	CorePalette_real.cpp	\
	$(builddir)/CoreScreen.cpp		\
	CoreScreen_real.cpp	\
	$(builddir)/CoreSurface.cpp		\
	CoreSurface_real.cpp	\
	$(builddir)/CoreSurfaceClient.cpp		\
	CoreSurfaceClient_real.cpp	\
	$(builddir)/CoreWindow.cpp		\
	CoreWindow_real.cpp	\
	$(builddir)/CoreWindowStack.cpp		\
	CoreWindowStack_real.cpp	\
	Debug.cpp		\
	DisplayTask.cpp		\
	Interface.cpp		\
	Renderer.cpp		\
	SurfaceTask.cpp		\
	Task.cpp		\
	TaskManager.cpp		\
	TaskThreadsQ.cpp	\
	Util.cpp		\
	clipboard.c		\
	colorhash.c		\
	core.c			\
	core_parts.c		\
	fonts.c			\
	gfxcard.c		\
	graphics_state.c	\
	input.c			\
	input_hub.c		\
	layer_context.c		\
	layer_control.c		\
	layer_region.c		\
	layers.c		\
	local_surface_pool.c	\
	palette.c		\
	prealloc_surface_pool.c	\
	prealloc_surface_pool_bridge.c	\
	screen.c		\
	screens.c		\
	shared_secure_surface_pool.c	\
	shared_surface_pool.c	\
	state.c			\
	surface.c		\
	surface_allocation.cpp	\
	surface_buffer.c	\
	surface_client.c	\
	surface_core.c		\
	surface_pool.c		\
	surface_pool_bridge.c	\
	system.c		\
	windows.c		\
	windowstack.c		\
	wm.c

all: all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am $(top_srcdir)/rules/flux_comp.make $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/core/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/core/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/rules/flux_comp.make:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}

libdirectfb_core.la: $(libdirectfb_core_la_OBJECTS) $(libdirectfb_core_la_DEPENDENCIES) $(EXTRA_libdirectfb_core_la_DEPENDENCIES) 
	$(AM_V_CXXLD)$(CXXLINK)  $(libdirectfb_core_la_OBJECTS) $(libdirectfb_core_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/CoreDFB.Plo
include ./$(DEPDIR)/CoreDFB_real.Plo
include ./$(DEPDIR)/CoreGraphicsState.Plo
include ./$(DEPDIR)/CoreGraphicsStateClient.Plo
include ./$(DEPDIR)/CoreGraphicsState_real.Plo
include ./$(DEPDIR)/CoreInputDevice.Plo
include ./$(DEPDIR)/CoreInputDevice_real.Plo
include ./$(DEPDIR)/CoreLayer.Plo
include ./$(DEPDIR)/CoreLayerContext.Plo
include ./$(DEPDIR)/CoreLayerContext_real.Plo
include ./$(DEPDIR)/CoreLayerRegion.Plo
include ./$(DEPDIR)/CoreLayerRegion_real.Plo
include ./$(DEPDIR)/CoreLayer_real.Plo
include ./$(DEPDIR)/CorePalette.Plo
include ./$(DEPDIR)/CorePalette_real.Plo
include ./$(DEPDIR)/CoreScreen.Plo
include ./$(DEPDIR)/CoreScreen_real.Plo
include ./$(DEPDIR)/CoreSlave.Plo
include ./$(DEPDIR)/CoreSlave_real.Plo
include ./$(DEPDIR)/CoreSurface.Plo
include ./$(DEPDIR)/CoreSurfaceClient.Plo
include ./$(DEPDIR)/CoreSurfaceClient_real.Plo
include ./$(DEPDIR)/CoreSurface_real.Plo
include ./$(DEPDIR)/CoreWindow.Plo
include ./$(DEPDIR)/CoreWindowStack.Plo
include ./$(DEPDIR)/CoreWindowStack_real.Plo
include ./$(DEPDIR)/CoreWindow_real.Plo
include ./$(DEPDIR)/Debug.Plo
include ./$(DEPDIR)/DisplayTask.Plo
include ./$(DEPDIR)/Interface.Plo
include ./$(DEPDIR)/Renderer.Plo
include ./$(DEPDIR)/SurfaceTask.Plo
include ./$(DEPDIR)/Task.Plo
include ./$(DEPDIR)/TaskManager.Plo
include ./$(DEPDIR)/TaskThreadsQ.Plo
include ./$(DEPDIR)/Util.Plo
include ./$(DEPDIR)/clipboard.Plo
include ./$(DEPDIR)/colorhash.Plo
include ./$(DEPDIR)/core.Plo
include ./$(DEPDIR)/core_parts.Plo
include ./$(DEPDIR)/fonts.Plo
include ./$(DEPDIR)/gfxcard.Plo
include ./$(DEPDIR)/graphics_state.Plo
include ./$(DEPDIR)/input.Plo
include ./$(DEPDIR)/input_hub.Plo
include ./$(DEPDIR)/layer_context.Plo
include ./$(DEPDIR)/layer_control.Plo
include ./$(DEPDIR)/layer_region.Plo
include ./$(DEPDIR)/layers.Plo
include ./$(DEPDIR)/local_surface_pool.Plo
include ./$(DEPDIR)/palette.Plo
include ./$(DEPDIR)/prealloc_surface_pool.Plo
include ./$(DEPDIR)/prealloc_surface_pool_bridge.Plo
include ./$(DEPDIR)/screen.Plo
include ./$(DEPDIR)/screens.Plo
include ./$(DEPDIR)/shared_secure_surface_pool.Plo
include ./$(DEPDIR)/shared_surface_pool.Plo
include ./$(DEPDIR)/state.Plo
include ./$(DEPDIR)/surface.Plo
include ./$(DEPDIR)/surface_allocation.Plo
include ./$(DEPDIR)/surface_buffer.Plo
include ./$(DEPDIR)/surface_client.Plo
include ./$(DEPDIR)/surface_core.Plo
include ./$(DEPDIR)/surface_pool.Plo
include ./$(DEPDIR)/surface_pool_bridge.Plo
include ./$(DEPDIR)/system.Plo
include ./$(DEPDIR)/windows.Plo
include ./$(DEPDIR)/windowstack.Plo
include ./$(DEPDIR)/wm.Plo

.c.o:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CC)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LTCOMPILE) -c -o $@ $<

.cpp.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

CoreDFB.lo: $(builddir)/CoreDFB.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreDFB.lo -MD -MP -MF $(DEPDIR)/CoreDFB.Tpo -c -o CoreDFB.lo `test -f '$(builddir)/CoreDFB.cpp' || echo '$(srcdir)/'`$(builddir)/CoreDFB.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreDFB.Tpo $(DEPDIR)/CoreDFB.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreDFB.cpp' object='CoreDFB.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreDFB.lo `test -f '$(builddir)/CoreDFB.cpp' || echo '$(srcdir)/'`$(builddir)/CoreDFB.cpp

CoreSlave.lo: $(builddir)/CoreSlave.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreSlave.lo -MD -MP -MF $(DEPDIR)/CoreSlave.Tpo -c -o CoreSlave.lo `test -f '$(builddir)/CoreSlave.cpp' || echo '$(srcdir)/'`$(builddir)/CoreSlave.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreSlave.Tpo $(DEPDIR)/CoreSlave.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreSlave.cpp' object='CoreSlave.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreSlave.lo `test -f '$(builddir)/CoreSlave.cpp' || echo '$(srcdir)/'`$(builddir)/CoreSlave.cpp

CoreGraphicsState.lo: $(builddir)/CoreGraphicsState.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreGraphicsState.lo -MD -MP -MF $(DEPDIR)/CoreGraphicsState.Tpo -c -o CoreGraphicsState.lo `test -f '$(builddir)/CoreGraphicsState.cpp' || echo '$(srcdir)/'`$(builddir)/CoreGraphicsState.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreGraphicsState.Tpo $(DEPDIR)/CoreGraphicsState.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreGraphicsState.cpp' object='CoreGraphicsState.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreGraphicsState.lo `test -f '$(builddir)/CoreGraphicsState.cpp' || echo '$(srcdir)/'`$(builddir)/CoreGraphicsState.cpp

CoreInputDevice.lo: $(builddir)/CoreInputDevice.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreInputDevice.lo -MD -MP -MF $(DEPDIR)/CoreInputDevice.Tpo -c -o CoreInputDevice.lo `test -f '$(builddir)/CoreInputDevice.cpp' || echo '$(srcdir)/'`$(builddir)/CoreInputDevice.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreInputDevice.Tpo $(DEPDIR)/CoreInputDevice.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreInputDevice.cpp' object='CoreInputDevice.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreInputDevice.lo `test -f '$(builddir)/CoreInputDevice.cpp' || echo '$(srcdir)/'`$(builddir)/CoreInputDevice.cpp

CoreLayer.lo: $(builddir)/CoreLayer.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreLayer.lo -MD -MP -MF $(DEPDIR)/CoreLayer.Tpo -c -o CoreLayer.lo `test -f '$(builddir)/CoreLayer.cpp' || echo '$(srcdir)/'`$(builddir)/CoreLayer.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreLayer.Tpo $(DEPDIR)/CoreLayer.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreLayer.cpp' object='CoreLayer.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreLayer.lo `test -f '$(builddir)/CoreLayer.cpp' || echo '$(srcdir)/'`$(builddir)/CoreLayer.cpp

CoreLayerContext.lo: $(builddir)/CoreLayerContext.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreLayerContext.lo -MD -MP -MF $(DEPDIR)/CoreLayerContext.Tpo -c -o CoreLayerContext.lo `test -f '$(builddir)/CoreLayerContext.cpp' || echo '$(srcdir)/'`$(builddir)/CoreLayerContext.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreLayerContext.Tpo $(DEPDIR)/CoreLayerContext.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreLayerContext.cpp' object='CoreLayerContext.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreLayerContext.lo `test -f '$(builddir)/CoreLayerContext.cpp' || echo '$(srcdir)/'`$(builddir)/CoreLayerContext.cpp

CoreLayerRegion.lo: $(builddir)/CoreLayerRegion.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreLayerRegion.lo -MD -MP -MF $(DEPDIR)/CoreLayerRegion.Tpo -c -o CoreLayerRegion.lo `test -f '$(builddir)/CoreLayerRegion.cpp' || echo '$(srcdir)/'`$(builddir)/CoreLayerRegion.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreLayerRegion.Tpo $(DEPDIR)/CoreLayerRegion.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreLayerRegion.cpp' object='CoreLayerRegion.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreLayerRegion.lo `test -f '$(builddir)/CoreLayerRegion.cpp' || echo '$(srcdir)/'`$(builddir)/CoreLayerRegion.cpp

CorePalette.lo: $(builddir)/CorePalette.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorePalette.lo -MD -MP -MF $(DEPDIR)/CorePalette.Tpo -c -o CorePalette.lo `test -f '$(builddir)/CorePalette.cpp' || echo '$(srcdir)/'`$(builddir)/CorePalette.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CorePalette.Tpo $(DEPDIR)/CorePalette.Plo
#	$(AM_V_CXX)source='$(builddir)/CorePalette.cpp' object='CorePalette.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorePalette.lo `test -f '$(builddir)/CorePalette.cpp' || echo '$(srcdir)/'`$(builddir)/CorePalette.cpp

CoreScreen.lo: $(builddir)/CoreScreen.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreScreen.lo -MD -MP -MF $(DEPDIR)/CoreScreen.Tpo -c -o CoreScreen.lo `test -f '$(builddir)/CoreScreen.cpp' || echo '$(srcdir)/'`$(builddir)/CoreScreen.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreScreen.Tpo $(DEPDIR)/CoreScreen.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreScreen.cpp' object='CoreScreen.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreScreen.lo `test -f '$(builddir)/CoreScreen.cpp' || echo '$(srcdir)/'`$(builddir)/CoreScreen.cpp

CoreSurface.lo: $(builddir)/CoreSurface.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreSurface.lo -MD -MP -MF $(DEPDIR)/CoreSurface.Tpo -c -o CoreSurface.lo `test -f '$(builddir)/CoreSurface.cpp' || echo '$(srcdir)/'`$(builddir)/CoreSurface.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreSurface.Tpo $(DEPDIR)/CoreSurface.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreSurface.cpp' object='CoreSurface.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreSurface.lo `test -f '$(builddir)/CoreSurface.cpp' || echo '$(srcdir)/'`$(builddir)/CoreSurface.cpp

CoreSurfaceClient.lo: $(builddir)/CoreSurfaceClient.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreSurfaceClient.lo -MD -MP -MF $(DEPDIR)/CoreSurfaceClient.Tpo -c -o CoreSurfaceClient.lo `test -f '$(builddir)/CoreSurfaceClient.cpp' || echo '$(srcdir)/'`$(builddir)/CoreSurfaceClient.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreSurfaceClient.Tpo $(DEPDIR)/CoreSurfaceClient.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreSurfaceClient.cpp' object='CoreSurfaceClient.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreSurfaceClient.lo `test -f '$(builddir)/CoreSurfaceClient.cpp' || echo '$(srcdir)/'`$(builddir)/CoreSurfaceClient.cpp

CoreWindow.lo: $(builddir)/CoreWindow.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreWindow.lo -MD -MP -MF $(DEPDIR)/CoreWindow.Tpo -c -o CoreWindow.lo `test -f '$(builddir)/CoreWindow.cpp' || echo '$(srcdir)/'`$(builddir)/CoreWindow.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreWindow.Tpo $(DEPDIR)/CoreWindow.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreWindow.cpp' object='CoreWindow.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreWindow.lo `test -f '$(builddir)/CoreWindow.cpp' || echo '$(srcdir)/'`$(builddir)/CoreWindow.cpp

CoreWindowStack.lo: $(builddir)/CoreWindowStack.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CoreWindowStack.lo -MD -MP -MF $(DEPDIR)/CoreWindowStack.Tpo -c -o CoreWindowStack.lo `test -f '$(builddir)/CoreWindowStack.cpp' || echo '$(srcdir)/'`$(builddir)/CoreWindowStack.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/CoreWindowStack.Tpo $(DEPDIR)/CoreWindowStack.Plo
#	$(AM_V_CXX)source='$(builddir)/CoreWindowStack.cpp' object='CoreWindowStack.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CoreWindowStack.lo `test -f '$(builddir)/CoreWindowStack.cpp' || echo '$(srcdir)/'`$(builddir)/CoreWindowStack.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-internalincludeHEADERS: $(internalinclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(internalinclude_HEADERS)'; test -n "$(internalincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(internalincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(internalincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(internalincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(internalincludedir)" || exit $$?; \
	done

uninstall-internalincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(internalinclude_HEADERS)'; test -n "$(internalincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(internalincludedir)'; $(am__uninstall_files_from_dir)

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(internalincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-local distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-internalincludeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-internalincludeHEADERS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES cscopelist-am ctags \
	ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-local distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-internalincludeHEADERS \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-internalincludeHEADERS


core_strings.h: surface.h $(MKNAMES) Makefile
	@echo '#ifndef __CORE__CORE_STRINGS_H__' > $@
	@echo '#define __CORE__CORE_STRINGS_H__' >> $@
	@echo '#include <core/surface.h>' >> $@

	@$(MKNAMES) CoreSurfaceTypeFlags CSTF NONE CoreSurfaceTypeFlags flag $(INCP)/surface.h \
	   | grep -v CSTF_ALL >> $@

	@echo '' >> $@
	@echo '#endif' >> $@

distclean-local:
	rm -f CoreDFB.cpp
	rm -f CoreDFB.h
	rm -f CoreSlave.cpp
	rm -f CoreSlave.h
	rm -f CoreGraphicsState.cpp
	rm -f CoreGraphicsState.h
	rm -f CoreInputDevice.cpp
	rm -f CoreInputDevice.h
	rm -f CoreLayerContext.cpp
	rm -f CoreLayerContext.h
	rm -f CoreLayer.cpp
	rm -f CoreLayer.h
	rm -f CoreLayerRegion.cpp
	rm -f CoreLayerRegion.h
	rm -f CorePalette.cpp
	rm -f CorePalette.h
	rm -f CoreScreen.cpp
	rm -f CoreScreen.h
	rm -f CoreSurface.cpp
	rm -f CoreSurface.h
	rm -f CoreWindow.cpp
	rm -f CoreWindow.h
	rm -f CoreWindowStack.cpp
	rm -f CoreWindowStack.h

# quirks for generated headers
$(srcdir)/CoreGraphicsStateClient.cpp: CoreGraphicsState.h CoreDFB.h
$(srcdir)/core.c: CoreDFB.h CoreSlave.h
$(srcdir)/surface.c: CoreDFB.h
$(srcdir)/graphics_state.c: CoreGraphicsState.h
$(srcdir)/input.c: CoreInputDevice.h
$(srcdir)/layer_context.c: CoreLayerContext.h
$(srcdir)/layers.c: CoreLayer.h
$(srcdir)/layer_region.c: CoreLayerRegion.h
$(srcdir)/palette.c: CorePalette.h
$(srcdir)/screens.c: CoreScreen.h
$(srcdir)/surface.c: CoreSurface.h
$(srcdir)/surface_buffer.c: CoreSurface.h
$(srcdir)/windows.c: CoreWindow.h
$(srcdir)/windowstack.c: CoreWindowStack.h

$(srcdir)/CoreDFB_real.cpp: CoreGraphicsState.h CoreDFB.h
$(srcdir)/CoreGraphicsState_real.cpp: CoreGraphicsState.h
$(srcdir)/CoreInputDevice_real.cpp: CoreInputDevice.h
$(srcdir)/CoreLayerContext_real.cpp: CoreLayerContext.h
$(srcdir)/CoreLayer_real.cpp: CoreLayer.h
$(srcdir)/CoreLayerRegion_real.cpp: CoreLayerRegion.h
$(srcdir)/CorePalette_real.cpp: CorePalette.h
$(srcdir)/CoreScreen_real.cpp: CoreScreen.h
$(srcdir)/CoreSlave_real.cpp: CoreSlave.h
$(srcdir)/CoreSurface_real.cpp: CoreSurface.h
$(srcdir)/CoreSurfaceClient_real.cpp: CoreSurfaceClient.h
$(srcdir)/CoreWindow_real.cpp: CoreWindow.h
$(srcdir)/CoreWindowStack_real.cpp: CoreWindowStack.h

$(srcdir)/Debug.cpp: core_strings.h
FLUX_ARGS ?= -i --include-prefix=core --call-mode --object-ptrs --static-args-bytes=FLUXED_ARGS_BYTES --dispatch-error-abort

$(builddir)/%.cpp $(builddir)/%.h: $(srcdir)/%.flux
	$(FLUXCOMP) $(FLUX_ARGS) $<

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
