# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/DirectFB-examples
pkgincludedir = $(includedir)/DirectFB-examples
pkglibdir = $(libdir)/DirectFB-examples
pkglibexecdir = $(libexecdir)/DirectFB-examples
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
noinst_PROGRAMS = ve_test$(EXEEXT)
bin_PROGRAMS = df_andi$(EXEEXT) df_bltload$(EXEEXT) \
	df_drivertest$(EXEEXT) df_drivertest2$(EXEEXT) \
	df_cpuload$(EXEEXT) df_databuffer$(EXEEXT) df_dok$(EXEEXT) \
	df_fire$(EXEEXT) df_flip$(EXEEXT) df_fonts$(EXEEXT) \
	df_input$(EXEEXT) df_joystick$(EXEEXT) df_layer$(EXEEXT) \
	df_matrix$(EXEEXT) df_netload$(EXEEXT) df_dioload$(EXEEXT) \
	df_palette$(EXEEXT) df_particle$(EXEEXT) df_porter$(EXEEXT) \
	df_video$(EXEEXT) df_video_particle$(EXEEXT) \
	df_stress$(EXEEXT) df_texture$(EXEEXT) df_window$(EXEEXT) \
	pss$(EXEEXT) $(am__EXEEXT_1) $(am__EXEEXT_2)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__EXEEXT_1 = df_andi3d$(EXEEXT) \
	df_texture3d$(EXEEXT)
am__EXEEXT_2 = df_matrix_water$(EXEEXT)
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)
am_df_andi_OBJECTS = df_andi.$(OBJEXT)
df_andi_OBJECTS = $(am_df_andi_OBJECTS)
am__DEPENDENCIES_1 =
df_andi_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_andi3d_OBJECTS = df_andi3d.$(OBJEXT)
df_andi3d_OBJECTS = $(am_df_andi3d_OBJECTS)
df_andi3d_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_bltload_OBJECTS = df_bltload.$(OBJEXT)
df_bltload_OBJECTS = $(am_df_bltload_OBJECTS)
df_bltload_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_cpuload_OBJECTS = df_cpuload.$(OBJEXT)
df_cpuload_OBJECTS = $(am_df_cpuload_OBJECTS)
df_cpuload_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_databuffer_OBJECTS = df_databuffer.$(OBJEXT)
df_databuffer_OBJECTS = $(am_df_databuffer_OBJECTS)
df_databuffer_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_dioload_OBJECTS = df_dioload.$(OBJEXT)
df_dioload_OBJECTS = $(am_df_dioload_OBJECTS)
df_dioload_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_dok_OBJECTS = df_dok.$(OBJEXT)
df_dok_OBJECTS = $(am_df_dok_OBJECTS)
df_dok_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_drivertest_OBJECTS = df_drivertest.$(OBJEXT)
df_drivertest_OBJECTS = $(am_df_drivertest_OBJECTS)
df_drivertest_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_drivertest2_OBJECTS = df_drivertest2.$(OBJEXT)
df_drivertest2_OBJECTS = $(am_df_drivertest2_OBJECTS)
df_drivertest2_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_fire_OBJECTS = df_fire.$(OBJEXT)
df_fire_OBJECTS = $(am_df_fire_OBJECTS)
df_fire_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_flip_OBJECTS = df_flip.$(OBJEXT)
df_flip_OBJECTS = $(am_df_flip_OBJECTS)
df_flip_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_fonts_OBJECTS = df_fonts.$(OBJEXT)
df_fonts_OBJECTS = $(am_df_fonts_OBJECTS)
df_fonts_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_input_OBJECTS = df_input.$(OBJEXT)
df_input_OBJECTS = $(am_df_input_OBJECTS)
df_input_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_joystick_OBJECTS = df_joystick.$(OBJEXT)
df_joystick_OBJECTS = $(am_df_joystick_OBJECTS)
df_joystick_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_layer_OBJECTS = df_layer.$(OBJEXT)
df_layer_OBJECTS = $(am_df_layer_OBJECTS)
df_layer_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_matrix_OBJECTS = df_matrix.$(OBJEXT)
df_matrix_OBJECTS = $(am_df_matrix_OBJECTS)
df_matrix_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_matrix_water_OBJECTS = df_matrix_water.$(OBJEXT)
df_matrix_water_OBJECTS = $(am_df_matrix_water_OBJECTS)
df_matrix_water_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_netload_OBJECTS = df_netload.$(OBJEXT)
df_netload_OBJECTS = $(am_df_netload_OBJECTS)
df_netload_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_palette_OBJECTS = df_palette.$(OBJEXT)
df_palette_OBJECTS = $(am_df_palette_OBJECTS)
df_palette_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_particle_OBJECTS = df_particle.$(OBJEXT)
df_particle_OBJECTS = $(am_df_particle_OBJECTS)
df_particle_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_porter_OBJECTS = df_porter.$(OBJEXT)
df_porter_OBJECTS = $(am_df_porter_OBJECTS)
df_porter_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_stress_OBJECTS = df_stress.$(OBJEXT)
df_stress_OBJECTS = $(am_df_stress_OBJECTS)
df_stress_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_texture_OBJECTS = df_texture.$(OBJEXT) ve.$(OBJEXT)
df_texture_OBJECTS = $(am_df_texture_OBJECTS)
df_texture_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_texture3d_OBJECTS = df_texture3d.$(OBJEXT) ve.$(OBJEXT)
df_texture3d_OBJECTS = $(am_df_texture3d_OBJECTS)
df_texture3d_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_video_OBJECTS = df_video.$(OBJEXT)
df_video_OBJECTS = $(am_df_video_OBJECTS)
df_video_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_video_particle_OBJECTS = df_video_particle.$(OBJEXT)
df_video_particle_OBJECTS = $(am_df_video_particle_OBJECTS)
df_video_particle_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_df_window_OBJECTS = df_window.$(OBJEXT)
df_window_OBJECTS = $(am_df_window_OBJECTS)
df_window_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_pss_OBJECTS = pss.$(OBJEXT)
pss_OBJECTS = $(am_pss_OBJECTS)
pss_DEPENDENCIES = $(am__DEPENDENCIES_1)
am_ve_test_OBJECTS = ve_test.$(OBJEXT) ve.$(OBJEXT)
ve_test_OBJECTS = $(am_ve_test_OBJECTS)
ve_test_DEPENDENCIES = $(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(df_andi_SOURCES) $(df_andi3d_SOURCES) \
	$(df_bltload_SOURCES) $(df_cpuload_SOURCES) \
	$(df_databuffer_SOURCES) $(df_dioload_SOURCES) \
	$(df_dok_SOURCES) $(df_drivertest_SOURCES) \
	$(df_drivertest2_SOURCES) $(df_fire_SOURCES) \
	$(df_flip_SOURCES) $(df_fonts_SOURCES) $(df_input_SOURCES) \
	$(df_joystick_SOURCES) $(df_layer_SOURCES) \
	$(df_matrix_SOURCES) $(df_matrix_water_SOURCES) \
	$(df_netload_SOURCES) $(df_palette_SOURCES) \
	$(df_particle_SOURCES) $(df_porter_SOURCES) \
	$(df_stress_SOURCES) $(df_texture_SOURCES) \
	$(df_texture3d_SOURCES) $(df_video_SOURCES) \
	$(df_video_particle_SOURCES) $(df_window_SOURCES) \
	$(pss_SOURCES) $(ve_test_SOURCES)
DIST_SOURCES = $(df_andi_SOURCES) $(df_andi3d_SOURCES) \
	$(df_bltload_SOURCES) $(df_cpuload_SOURCES) \
	$(df_databuffer_SOURCES) $(df_dioload_SOURCES) \
	$(df_dok_SOURCES) $(df_drivertest_SOURCES) \
	$(df_drivertest2_SOURCES) $(df_fire_SOURCES) \
	$(df_flip_SOURCES) $(df_fonts_SOURCES) $(df_input_SOURCES) \
	$(df_joystick_SOURCES) $(df_layer_SOURCES) \
	$(df_matrix_SOURCES) $(df_matrix_water_SOURCES) \
	$(df_netload_SOURCES) $(df_palette_SOURCES) \
	$(df_particle_SOURCES) $(df_porter_SOURCES) \
	$(df_stress_SOURCES) $(df_texture_SOURCES) \
	$(df_texture3d_SOURCES) $(df_video_SOURCES) \
	$(df_video_particle_SOURCES) $(df_window_SOURCES) \
	$(pss_SOURCES) $(ve_test_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \
	$(RECURSIVE_CLEAN_TARGETS:-recursive=) tags TAGS ctags CTAGS \
	distdir
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = ${SHELL} /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0/missing --run aclocal-1.11 
AMTAR = ${SHELL} /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0/missing --run tar
AUTOCONF = ${SHELL} /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0/missing --run autoconf
AUTOHEADER = ${SHELL} /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0/missing --run autoheader
AUTOMAKE = ${SHELL} /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -Wall -O3 -pipe  -Werror-implicit-function-declaration
CPP = gcc -E
CPPFLAGS = 
CYGPATH_W = echo
DATADIR = ${datarootdir}/directfb-examples
DEFS = -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DPACKAGE=\"DirectFB-examples\" -DVERSION=\"1.6.0\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_STDBOOL_H=1
DEPDIR = .deps
DIRECTFB_CFLAGS = -D_REENTRANT -I/usr/local/include/directfb  
DIRECTFB_LIBS = -L/usr/local/lib -ldirectfb -lfusion -ldirect -lpthread  
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = DirectFB-examples
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_URL = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
VERSION = 1.6.0
abs_builddir = /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0/src
abs_srcdir = /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0/src
abs_top_builddir = /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0
abs_top_srcdir = /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0
ac_ct_CC = gcc
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/nayeem/Desktop/DirectFB/DirectFB-examples-1.6.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
SUBDIRS = df_knuckles df_neo spacedream
fontsdatadir = ${datarootdir}/directfb-examples/fonts
AM_CFLAGS = -D_REENTRANT -I/usr/local/include/directfb   -D_GNU_SOURCE
LIBADDS = \
	-L/usr/local/lib -ldirectfb -lfusion -ldirect -lpthread  

AM_CPPFLAGS = \
	-DDATADIR=\"${datarootdir}/directfb-examples\" \
	-DFONT=\"$(fontsdatadir)/decker.ttf\"

ve_test_SOURCES = ve_test.c ve.c ve.h
ve_test_LDADD = $(LIBADDS) -lm
#WATER_PROGS = 
WATER_PROGS = df_matrix_water
#STEREO_API_PROGS = 
STEREO_API_PROGS = df_andi3d df_texture3d
df_andi_SOURCES = df_andi.c 
df_andi_LDADD = $(LIBADDS)
df_andi3d_SOURCES = df_andi3d.c
df_andi3d_LDADD = $(LIBADDS)
df_drivertest_SOURCES = df_drivertest.c 
df_drivertest_LDADD = $(LIBADDS)
df_drivertest2_SOURCES = df_drivertest2.c 
df_drivertest2_LDADD = $(LIBADDS)
df_bltload_SOURCES = df_bltload.c 
df_bltload_LDADD = $(LIBADDS)
df_cpuload_SOURCES = df_cpuload.c 
df_cpuload_LDADD = $(LIBADDS)
df_databuffer_SOURCES = df_databuffer.c 
df_databuffer_LDADD = $(LIBADDS)
df_dok_SOURCES = df_dok.c pngtest3.h
df_dok_LDADD = $(LIBADDS)
df_fire_SOURCES = df_fire.c
df_fire_LDADD = $(LIBADDS)
df_flip_SOURCES = df_flip.c
df_flip_LDADD = $(LIBADDS)
df_fonts_SOURCES = df_fonts.c
df_fonts_LDADD = $(LIBADDS)
df_input_SOURCES = df_input.c
df_input_LDADD = $(LIBADDS)
df_joystick_SOURCES = df_joystick.c 
df_joystick_LDADD = $(LIBADDS) -lm
df_layer_SOURCES = df_layer.c
df_layer_LDADD = $(LIBADDS) -lm
df_matrix_SOURCES = df_matrix.c
df_matrix_LDADD = $(LIBADDS) -lm
df_matrix_water_SOURCES = df_matrix_water.c
df_matrix_water_LDADD = $(LIBADDS) -lm
df_netload_SOURCES = df_netload.c 
df_netload_LDADD = $(LIBADDS)
df_dioload_SOURCES = df_dioload.c 
df_dioload_LDADD = $(LIBADDS)
df_palette_SOURCES = df_palette.c
df_palette_LDADD = $(LIBADDS)
df_particle_SOURCES = df_particle.c 
df_particle_LDADD = $(LIBADDS) -lm
df_porter_SOURCES = df_porter.c 
df_porter_LDADD = $(LIBADDS)
df_stress_SOURCES = df_stress.c
df_stress_LDADD = $(LIBADDS)
df_texture_SOURCES = df_texture.c util.h ve.c ve.h
df_texture_LDADD = $(LIBADDS) -lm
df_texture3d_SOURCES = df_texture3d.c util.h ve.c ve.h
df_texture3d_LDADD = $(LIBADDS) -lm
df_video_SOURCES = df_video.c 
df_video_LDADD = $(LIBADDS) -lm
df_video_particle_SOURCES = df_video_particle.c 
df_video_particle_LDADD = $(LIBADDS) -lm
df_window_SOURCES = df_window.c 
df_window_LDADD = $(LIBADDS) -lm
pss_SOURCES = pss.c
pss_LDADD = $(LIBADDS) -lm
all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
df_andi$(EXEEXT): $(df_andi_OBJECTS) $(df_andi_DEPENDENCIES) 
	@rm -f df_andi$(EXEEXT)
	$(LINK) $(df_andi_OBJECTS) $(df_andi_LDADD) $(LIBS)
df_andi3d$(EXEEXT): $(df_andi3d_OBJECTS) $(df_andi3d_DEPENDENCIES) 
	@rm -f df_andi3d$(EXEEXT)
	$(LINK) $(df_andi3d_OBJECTS) $(df_andi3d_LDADD) $(LIBS)
df_bltload$(EXEEXT): $(df_bltload_OBJECTS) $(df_bltload_DEPENDENCIES) 
	@rm -f df_bltload$(EXEEXT)
	$(LINK) $(df_bltload_OBJECTS) $(df_bltload_LDADD) $(LIBS)
df_cpuload$(EXEEXT): $(df_cpuload_OBJECTS) $(df_cpuload_DEPENDENCIES) 
	@rm -f df_cpuload$(EXEEXT)
	$(LINK) $(df_cpuload_OBJECTS) $(df_cpuload_LDADD) $(LIBS)
df_databuffer$(EXEEXT): $(df_databuffer_OBJECTS) $(df_databuffer_DEPENDENCIES) 
	@rm -f df_databuffer$(EXEEXT)
	$(LINK) $(df_databuffer_OBJECTS) $(df_databuffer_LDADD) $(LIBS)
df_dioload$(EXEEXT): $(df_dioload_OBJECTS) $(df_dioload_DEPENDENCIES) 
	@rm -f df_dioload$(EXEEXT)
	$(LINK) $(df_dioload_OBJECTS) $(df_dioload_LDADD) $(LIBS)
df_dok$(EXEEXT): $(df_dok_OBJECTS) $(df_dok_DEPENDENCIES) 
	@rm -f df_dok$(EXEEXT)
	$(LINK) $(df_dok_OBJECTS) $(df_dok_LDADD) $(LIBS)
df_drivertest$(EXEEXT): $(df_drivertest_OBJECTS) $(df_drivertest_DEPENDENCIES) 
	@rm -f df_drivertest$(EXEEXT)
	$(LINK) $(df_drivertest_OBJECTS) $(df_drivertest_LDADD) $(LIBS)
df_drivertest2$(EXEEXT): $(df_drivertest2_OBJECTS) $(df_drivertest2_DEPENDENCIES) 
	@rm -f df_drivertest2$(EXEEXT)
	$(LINK) $(df_drivertest2_OBJECTS) $(df_drivertest2_LDADD) $(LIBS)
df_fire$(EXEEXT): $(df_fire_OBJECTS) $(df_fire_DEPENDENCIES) 
	@rm -f df_fire$(EXEEXT)
	$(LINK) $(df_fire_OBJECTS) $(df_fire_LDADD) $(LIBS)
df_flip$(EXEEXT): $(df_flip_OBJECTS) $(df_flip_DEPENDENCIES) 
	@rm -f df_flip$(EXEEXT)
	$(LINK) $(df_flip_OBJECTS) $(df_flip_LDADD) $(LIBS)
df_fonts$(EXEEXT): $(df_fonts_OBJECTS) $(df_fonts_DEPENDENCIES) 
	@rm -f df_fonts$(EXEEXT)
	$(LINK) $(df_fonts_OBJECTS) $(df_fonts_LDADD) $(LIBS)
df_input$(EXEEXT): $(df_input_OBJECTS) $(df_input_DEPENDENCIES) 
	@rm -f df_input$(EXEEXT)
	$(LINK) $(df_input_OBJECTS) $(df_input_LDADD) $(LIBS)
df_joystick$(EXEEXT): $(df_joystick_OBJECTS) $(df_joystick_DEPENDENCIES) 
	@rm -f df_joystick$(EXEEXT)
	$(LINK) $(df_joystick_OBJECTS) $(df_joystick_LDADD) $(LIBS)
df_layer$(EXEEXT): $(df_layer_OBJECTS) $(df_layer_DEPENDENCIES) 
	@rm -f df_layer$(EXEEXT)
	$(LINK) $(df_layer_OBJECTS) $(df_layer_LDADD) $(LIBS)
df_matrix$(EXEEXT): $(df_matrix_OBJECTS) $(df_matrix_DEPENDENCIES) 
	@rm -f df_matrix$(EXEEXT)
	$(LINK) $(df_matrix_OBJECTS) $(df_matrix_LDADD) $(LIBS)
df_matrix_water$(EXEEXT): $(df_matrix_water_OBJECTS) $(df_matrix_water_DEPENDENCIES) 
	@rm -f df_matrix_water$(EXEEXT)
	$(LINK) $(df_matrix_water_OBJECTS) $(df_matrix_water_LDADD) $(LIBS)
df_netload$(EXEEXT): $(df_netload_OBJECTS) $(df_netload_DEPENDENCIES) 
	@rm -f df_netload$(EXEEXT)
	$(LINK) $(df_netload_OBJECTS) $(df_netload_LDADD) $(LIBS)
df_palette$(EXEEXT): $(df_palette_OBJECTS) $(df_palette_DEPENDENCIES) 
	@rm -f df_palette$(EXEEXT)
	$(LINK) $(df_palette_OBJECTS) $(df_palette_LDADD) $(LIBS)
df_particle$(EXEEXT): $(df_particle_OBJECTS) $(df_particle_DEPENDENCIES) 
	@rm -f df_particle$(EXEEXT)
	$(LINK) $(df_particle_OBJECTS) $(df_particle_LDADD) $(LIBS)
df_porter$(EXEEXT): $(df_porter_OBJECTS) $(df_porter_DEPENDENCIES) 
	@rm -f df_porter$(EXEEXT)
	$(LINK) $(df_porter_OBJECTS) $(df_porter_LDADD) $(LIBS)
df_stress$(EXEEXT): $(df_stress_OBJECTS) $(df_stress_DEPENDENCIES) 
	@rm -f df_stress$(EXEEXT)
	$(LINK) $(df_stress_OBJECTS) $(df_stress_LDADD) $(LIBS)
df_texture$(EXEEXT): $(df_texture_OBJECTS) $(df_texture_DEPENDENCIES) 
	@rm -f df_texture$(EXEEXT)
	$(LINK) $(df_texture_OBJECTS) $(df_texture_LDADD) $(LIBS)
df_texture3d$(EXEEXT): $(df_texture3d_OBJECTS) $(df_texture3d_DEPENDENCIES) 
	@rm -f df_texture3d$(EXEEXT)
	$(LINK) $(df_texture3d_OBJECTS) $(df_texture3d_LDADD) $(LIBS)
df_video$(EXEEXT): $(df_video_OBJECTS) $(df_video_DEPENDENCIES) 
	@rm -f df_video$(EXEEXT)
	$(LINK) $(df_video_OBJECTS) $(df_video_LDADD) $(LIBS)
df_video_particle$(EXEEXT): $(df_video_particle_OBJECTS) $(df_video_particle_DEPENDENCIES) 
	@rm -f df_video_particle$(EXEEXT)
	$(LINK) $(df_video_particle_OBJECTS) $(df_video_particle_LDADD) $(LIBS)
df_window$(EXEEXT): $(df_window_OBJECTS) $(df_window_DEPENDENCIES) 
	@rm -f df_window$(EXEEXT)
	$(LINK) $(df_window_OBJECTS) $(df_window_LDADD) $(LIBS)
pss$(EXEEXT): $(pss_OBJECTS) $(pss_DEPENDENCIES) 
	@rm -f pss$(EXEEXT)
	$(LINK) $(pss_OBJECTS) $(pss_LDADD) $(LIBS)
ve_test$(EXEEXT): $(ve_test_OBJECTS) $(ve_test_DEPENDENCIES) 
	@rm -f ve_test$(EXEEXT)
	$(LINK) $(ve_test_OBJECTS) $(ve_test_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/df_andi.Po
include ./$(DEPDIR)/df_andi3d.Po
include ./$(DEPDIR)/df_bltload.Po
include ./$(DEPDIR)/df_cpuload.Po
include ./$(DEPDIR)/df_databuffer.Po
include ./$(DEPDIR)/df_dioload.Po
include ./$(DEPDIR)/df_dok.Po
include ./$(DEPDIR)/df_drivertest.Po
include ./$(DEPDIR)/df_drivertest2.Po
include ./$(DEPDIR)/df_fire.Po
include ./$(DEPDIR)/df_flip.Po
include ./$(DEPDIR)/df_fonts.Po
include ./$(DEPDIR)/df_input.Po
include ./$(DEPDIR)/df_joystick.Po
include ./$(DEPDIR)/df_layer.Po
include ./$(DEPDIR)/df_matrix.Po
include ./$(DEPDIR)/df_matrix_water.Po
include ./$(DEPDIR)/df_netload.Po
include ./$(DEPDIR)/df_palette.Po
include ./$(DEPDIR)/df_particle.Po
include ./$(DEPDIR)/df_porter.Po
include ./$(DEPDIR)/df_stress.Po
include ./$(DEPDIR)/df_texture.Po
include ./$(DEPDIR)/df_texture3d.Po
include ./$(DEPDIR)/df_video.Po
include ./$(DEPDIR)/df_video_particle.Po
include ./$(DEPDIR)/df_window.Po
include ./$(DEPDIR)/pss.Po
include ./$(DEPDIR)/ve.Po
include ./$(DEPDIR)/ve_test.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic clean-noinstPROGRAMS \
	mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) ctags-recursive \
	install-am install-strip tags-recursive

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-noinstPROGRAMS ctags ctags-recursive \
	distclean distclean-compile distclean-generic distclean-tags \
	distdir dvi dvi-am html html-am info info-am install \
	install-am install-binPROGRAMS install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags tags-recursive \
	uninstall uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
